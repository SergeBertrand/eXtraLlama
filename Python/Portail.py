import gradio as gr
import importlib.util
import os
import sys
import json
import time
import requests
from pathlib import Path
from pydantic import BaseModel
from starlette.requests import Request
import colorama
from colorama import Fore, Style
import logging
import urllib3
import warnings

# Ignorer les warnings
warnings.filterwarnings("ignore", category=FutureWarning)
colorama.init(autoreset=True)  # Initialiser colorama pour la gestion des couleurs

# CSS pour la grille de fonctionnalit√©s
custom_css = """
/*----------------------------------------------------- Style pour personnaliser le Chatbot  -------------------------------------------------------------------*/


#custom-gallery .grid-container {
    height: 100vh !important; /* Ajustez la hauteur selon vos besoins */
    overflow: auto !important; /* Permet de d√©filer si le contenu d√©passe la hauteur */
}

.selected {
    font-weight: bold !important;
    font-size: 18px !important;
    color: #4f46e5 !important;
}

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/* Styles pour la grille */
.feature-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Trois colonnes */
    gap: 10px;
    margin-right: 10px;
    margin-left: 10px;
}

.feature-block {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
#    border-radius: 8px;
    border-bottom: 3px solid #6569ec;
    margin: 0 20px;
    padding: 10px;
    text-align: left;
    min-height: 100px;
    box-sizing: border-box;
}

"""
# Mettre √† jour le HTML des blocs pour les styles demand√©s
feature_blocks_html = """
<div class="feature-container">
    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üí¨</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Chatbot</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Un assistant virtuel IA qui vous permet de dialoguer avec des mod√®les LLM dans diff√©rents langages.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üìÑ</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">PDF</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Un assistant virtuel IA capable d'extraire et d'analyser des informations √† partir de documents PDF.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üéôÔ∏è</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Transcript</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Un assistant IA, capable de comprendre des questions verbales et de r√©pondre en langage vocal.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üì¢</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Commandes</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Un assistant IA, capable d'ex√©cuter des commandes vocales et de r√©pondre √† la voix.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üî¨</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Vision</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Un assistant IA dot√© de capacit√©s de reconnaissance d'images, r√©pondant aux questions bas√©es sur le contenu visuel.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üñºÔ∏è</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">SDXL</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Mod√®le Stable diffusion, g√©n√®re des images haute qualit√© pour des cr√©ations artistiques et graphiques sophistiqu√©es.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üñºÔ∏è</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">SD3.x</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Nouveaux mod√®les avanc√©s de Stable diffusion, g√©n√®re des images haute qualit√© pour des cr√©ations avec support du texte.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üé¥</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Flux.1</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Mod√®le avanc√© de diffusion de Black Forest Labs,  offrant une qualit√© d‚Äôimage exceptionnelle et une pr√©cision √©lev√©e.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üé¥</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">FaceSwap</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Mod√®le avanc√© de diffusion con√ßu pour √©changer les visages de diff√©rentes personnes dans des photos.</p>
    </div>

    <div class="feature-block" style="background-color: Transparent;">
        <div class="emoji-title" style="display: flex; align-items: center;">
            <div class="feature-emoji" style="font-size: 35px; margin-right: 5px;">üåê</div>
            <h3 style="color: #4f46e5; font-weight: bolder; margin: 0; font-size: 1.5em;">Ressources</h3>
        </div>
        <p style="color: #9ca3af; font-weight: bold;">Liens vers les pages de support et de t√©l√©chargements des mod√®les IA.</p>
    </div>
</div>
"""

# Fonction pour importer dynamiquement des modules
def import_module_from_path(module_name, module_path):
    try:
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)
        print(Fore.GREEN + f"Successfully imported {module_name}")
        return module
    except FileNotFoundError as e:
        print(Fore.RED + f"File not found for {module_name}: {str(e)}")
    except ImportError as e:
        print(Fore.RED + f"Import error for {module_name}: {str(e)}")
    except Exception as e:
        print(Fore.RED + f"Unexpected error importing {module_name}: {str(e)}")
    return None

# Chemins pour les modules
base_path = os.path.expandvars(r"%userprofile%\eXtraLlama")

app_paths = {
    "üìÑLanguages": {
        "üí¨ Chatbot": os.path.join(base_path, "Python\Chatbot.py"),
        "üìÑ PDF": os.path.join(base_path, "Python\PDF.py"),
        "üéôÔ∏è Transcript": os.path.join(base_path, "Python\Transcript.py"),
        "üì¢ Commandes": os.path.join(base_path, "Python\Commandes.py"),
    },
    "üî¨ Vision": {
        "üî¨ Vision": os.path.join(base_path, "Python\Vision.py"),
    },
    "üñºÔ∏è Diffusions": {
        "üñºÔ∏è SDXL": os.path.join(base_path, "Python\SDXL.py"),
        "üñºÔ∏è SD3.x": os.path.join(base_path, "Python\SD3.x.py"),
        "üé¥ Flux.1": os.path.join(base_path, "Python\Flux1.py"),
        "üé¥ FaceSwap": os.path.join(base_path, "Python\FaceSwap.py"),
    },
    "üåê Ressources": {
        "üåê Ressources & Support": os.path.join(base_path, "Python\Ressources.py"),
    }
}

# Importation des modules
print("\nStarting tabs import...\n")
imported_apps = {}
for category, modules in app_paths.items():
    imported_apps[category] = {}
    for name, path in modules.items():
        module = import_module_from_path(name, path)
        if module and hasattr(module, 'launch_interface'):
            imported_apps[category][name] = module
        else:
            print(Fore.RED + f"Warning: Module {name} not imported or does not have a launch_interface function")
print("\nLaunching tabs on portal...\n")

# Fonction pour d√©marrer le portail sans duplication des blocs
def launch_portal():
    with gr.Blocks(css=custom_css, theme=gr.themes.Soft(spacing_size="sm", text_size="lg")) as interface:
        # Titre principal et conteneur de fonctionnalit√©s en grille
        with gr.Tabs():
            with gr.Tab("üéØ Accueil"):
                gr.HTML(feature_blocks_html)

            # Ajout des onglets et sous-onglets pour chaque module sans doublons
            for category, modules in imported_apps.items():
                with gr.Tab(f"{category}"):
                    with gr.Tabs():
                        for name, module in modules.items():
                            with gr.Tab(name):
                                try:
                                    module.launch_interface()
                                    print(Fore.GREEN + f"Interface for {name} launched successfully")
                                except Exception as e:
                                    print(Fore.RED + f"Error launching {name}: {str(e)}")
                                    gr.Markdown(f"Erreur lors du lancement de {name}: {str(e)}")
        print("\nStarting local server...\n")

    return interface

# D√©marrer l'application Gradio
if __name__ == "__main__":
    portal_interface = launch_portal()
    portal_interface.launch(server_name="0.0.0.0", server_port=34000, share=True)